#use <conio>
#use <string>

typedef int compare_fn(void *x, void *y);
typedef void swap_fn(void *x, void *y);
typedef string stringify_fn(void* x);

void gsort(void*[] A, int n, compare_fn* cmp, swap_fn* swp)
{
    for (int i = 0; i < n; i++)
    {
        int min = i;

        for (int j = i+1; j < n; j++)
        {
            if ((*cmp)(A[j], A[min]) < 0)
            {
                min = j;            
            }
        }

        (*swp)(A[i], A[min]);
    }

    return;
}

int compare_int(void* x, void* y)
{
    if (*(int *)x < *(int *)y) return -1;
    if (*(int *)x == *(int *)y) return 0; 
    return 1;
}

void swap_int(void *x, void *y)
{
  int *a = (int*) x;
  int *b = (int*) y;
  int temp = *a;
  *a = *b;
  *b = temp;
}

string int_to_string(void* x)
{
    int* a = (int*) x;
    return string_fromint(*a);
}

void garray_print(void*[] A, int size, stringify_fn* s)
{
    for (int i = 0; i < size; i++)
    {
        printf("idx: %d | elem: %s \n", i, (*s)(A[i]));
    }
}



int main()
{
    printf("Test1\n");
    string* s = alloc(string);
    *s = "Hello World!\n";
    void* p = (void*) s;

    //@assert \hastag(string*, p);
    printf("%s\n", *((string*)p));
    //@assert(string_equal(*s, *((string*)p)));

    *s = string_join(*s, "Wassup?\n");
    printf("%s\n", *((string*)p));
    //@assert(string_equal(*s, *((string*)p)));

    int n = 10;
    int*[] A = alloc_array(int*, n);

    for (int i = 0; i < n; i++)
    {
        int* TMP = alloc(int);
        *TMP = i;
        A[i] = TMP;
    }

    void*[] B = alloc_array(void*, n);

    for (int i = 0; i < n; i++)
    {
        B[i] = (void*) A[i];
    }


    garray_print(B, n, &int_to_string);

    print("All tests passed!\n");
    return 0;
}