C0 C0 FF EE       # magic number
00 17             # version 11, arch = 1 (64 bits)

00 00             # int pool count
# int pool

00 26             # string pool total size
# string pool
69 64 78 3A 20 00  # "idx: "
20 7C 20 65 6C 65 6D 3A 20 00  # " | elem: "
20 0A 00  # " \n"
41 6C 6C 20 74 65 73 74 73 20 70 61 73 73 65 64 21 0A 00  # "All tests passed!\n"

00 03             # function count
# function_pool

#<main>
00                # number of arguments = 0
04                # number of local variables = 4
00 75             # code length = 117 bytes
10 0A    # bipush 10          # 10
36 00    # vstore 0           # n = 10;
15 00    # vload 0            # n
BC 08    # newarray 8         # alloc_array(int*, n)
36 01    # vstore 1           # A = alloc_array(int*, n);
10 00    # bipush 0           # 0
36 02    # vstore 2           # i = 0;
# <03:loop>
15 02    # vload 2            # i
15 00    # vload 0            # n
A1 00 06 # if_icmplt +6       # if (i < n) goto <04:body>
A7 00 1E # goto +30           # goto <05:exit>
# <04:body>
BB 04    # new 4              # alloc(int)
36 03    # vstore 3           # TMP = alloc(int);
15 03    # vload 3            # TMP
15 02    # vload 2            # i
4E       # imstore            # *(TMP) = i;
15 01    # vload 1            # A
15 02    # vload 2            # i
63       # aadds              # &A[i]
15 03    # vload 3            # TMP
4F       # amstore            # A[i] = TMP;
15 02    # vload 2            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 02    # vstore 2           # i += 1;
A7 FF DE # goto -34           # goto <03:loop>
# <05:exit>
15 00    # vload 0            # n
BC 08    # newarray 8         # alloc_array(void*, n)
36 02    # vstore 2           # B = alloc_array(void*, n);
10 00    # bipush 0           # 0
36 03    # vstore 3           # i = 0;
# <06:loop>
15 03    # vload 3            # i
15 00    # vload 0            # n
A1 00 06 # if_icmplt +6       # if (i < n) goto <07:body>
A7 00 1C # goto +28           # goto <08:exit>
# <07:body>
15 02    # vload 2            # B
15 03    # vload 3            # i
63       # aadds              # &B[i]
15 01    # vload 1            # A
15 03    # vload 3            # i
63       # aadds              # &A[i]
2F       # amload             # A[i]
C2 00 00 # addtag 0           # ((void*)A[i])
4F       # amstore            # B[i] = ((void*)A[i]);
15 03    # vload 3            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 03    # vstore 3           # i += 1;
A7 FF E0 # goto -32           # goto <06:loop>
# <08:exit>
15 02    # vload 2            # B
15 00    # vload 0            # n
16 00 01 # addrof_static 1    # &int_to_string
B8 00 02 # invokestatic 2     # garray_print(B, n, &int_to_string)
57       # pop                # (ignore result)
14 00 13 # aldc 19            # s[19] = "All tests passed!\n"
B7 00 01 # invokenative 1     # print("All tests passed!\n")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
B0       # return             # 


#<int_to_string>
01                # number of arguments = 1
02                # number of local variables = 2
00 0E             # code length = 14 bytes
15 00    # vload 0            # x
C0 00 00 # checktag 0         # ((int*)x)
36 01    # vstore 1           # a = ((int*)x);
15 01    # vload 1            # a
2E       # imload             # *(a)
B7 00 00 # invokenative 0     # string_fromint(*(a))
B0       # return             # 


#<garray_print>
03                # number of arguments = 3
04                # number of local variables = 4
00 43             # code length = 67 bytes
10 00    # bipush 0           # 0
36 03    # vstore 3           # i = 0;
# <00:loop>
15 03    # vload 3            # i
15 01    # vload 1            # size
A1 00 06 # if_icmplt +6       # if (i < size) goto <01:body>
A7 00 35 # goto +53           # goto <02:exit>
# <01:body>
14 00 00 # aldc 0             # s[0] = "idx: "
B7 00 01 # invokenative 1     # print("idx: ")
57       # pop                # (ignore result)
15 03    # vload 3            # i
B7 00 02 # invokenative 2     # printint(i)
57       # pop                # (ignore result)
14 00 06 # aldc 6             # s[6] = " | elem: "
B7 00 01 # invokenative 1     # print(" | elem: ")
57       # pop                # (ignore result)
15 00    # vload 0            # A
15 03    # vload 3            # i
63       # aadds              # &A[i]
2F       # amload             # A[i]
15 02    # vload 2            # s
B6       # invokedynamic      # (*(s))(A[i])
B7 00 01 # invokenative 1     # print((*(s))(A[i]))
57       # pop                # (ignore result)
14 00 10 # aldc 16            # s[16] = " \n"
B7 00 01 # invokenative 1     # print(" \n")
57       # pop                # (ignore result)
15 03    # vload 3            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 03    # vstore 3           # i += 1;
A7 FF C7 # goto -57           # goto <00:loop>
# <02:exit>
10 00    # bipush 0           # dummy return value
B0       # return             # 

00 03             # native count
# native pool
00 01 00 63       # string_fromint
00 01 00 06       # print
00 01 00 09       # printint

