/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Extended interface of queues
 *
 * 15-122 Principles of Imperative Computation
 */

#use <conio>

/************************************************************************/
/**************************** Client Interface **************************/

typedef void print_data_fn(void* x);            // may be useful for debugging
typedef bool check_property_fn(void* x);
typedef void* iterate_fn(void* accum, void* x);

/************************* End Client Interface *************************/
/************************************************************************/

/************************************************************************/
/************************* BEGIN IMPLEMENTATION *************************/

typedef struct list_node list;
struct list_node {
  void* data;
  list* next;
};

typedef struct queue_header queue;
struct queue_header {
  list* front;
  list* back;
  int size;
};

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WRITE YOUR CODE ONLY BETWEEN HERE */

bool is_inclusive_segment(list* start, list* end, int i) {
  if (start == NULL && i == 0) return true;
  if (i != 0 && start == NULL) return false;
  return is_inclusive_segment(start->next, end, i-1);
}

bool is_acyclic(list* start)
{
  if (start == NULL) return true;
  
  list* slow = start;
  list* fast = start->next;

  while (fast != NULL && fast->next != NULL)
  {
    if (slow == fast) return false;

    slow = slow->next;
    fast = fast->next->next;
  }

  return true;
}

bool is_queue(queue* Q) {
  /* FIX ME */
  return Q != NULL 
  && is_acyclic(Q->front)
  && is_inclusive_segment(Q->front, Q->back, Q->size);
}

void print_queue(queue* Q, print_data_fn* print_data)
//@requires is_queue(Q) && print_data != NULL; 
{
  /* OPTIONAL (but recommended) */
  list* TMP = Q->front;

  for(int i = 0; i < Q->size; i++)
  {
    if (TMP == Q->front) print("| FRONT |\n");
    
    printf("idx: %d | data: ", i);
    
    (*print_data) (TMP->data);

    print("\n");
    
    if (TMP == Q->back)  print("| BACK |\n");
    
    TMP = TMP->next;
  }

  return;
}

queue* queue_new()
//@ensures is_queue(\result);  
{
  queue* new = alloc(queue);
  new->size = 0;
  return new;
}

int queue_size(queue* Q)
//@requires is_queue(Q);
//@ensures \result >= 0;
{
  return Q->size;
}

void enq(queue* Q, void* x)
//@requires is_queue(Q);
//@ensures is_queue(Q); 
{
  list* newElem = alloc(list);
  newElem->data = x;

  if (Q->size == 0)
  {
    Q->front = newElem;
    Q->back = newElem;

  } else {
    
    Q->back->next = newElem;
    Q->back = newElem;

  }

  Q->size++;

}

/* O(1) -- removes an item from the front of the queue */
void* deq(queue* Q)
//@requires is_queue(Q) && queue_size(Q) > 0;
//@ensures is_queue(Q) && queue_size(Q) >= 0;
{
  void* res = Q->front->data;

  if (Q->size == 1)
  {
    Q->front = NULL;
    Q->back = NULL;

  } else {

    Q->front = Q->front->next;
  }

  Q->size--;

  return res;

}

void* queue_peek(queue* Q, int i)
//@requires is_queue(Q) && 0 <= i && i < queue_size(Q);
{
  list* TMP = Q->front;
  int n = i;

  while(n != 0)
  {
    TMP = TMP->next;
    n--;
  }

  return TMP->data;
}

void queue_reverse(queue* Q)
//@requires is_queue(Q);
//@ensures is_queue(Q);
{
    list* loPtr  = NULL;
    list* midPtr = Q->front;
    if (midPtr == NULL || midPtr->next == NULL) return;
    list* hiPtr  = NULL;

    int i = 0;

    while(midPtr != NULL)
    //@loop_invariant is_inclusive_segment(loPtr, Q->front, i);
    {
      hiPtr = midPtr->next;
      midPtr->next = loPtr;
      loPtr = midPtr;
      midPtr = hiPtr;
      i++;
    }
    //@assert loPtr == Q->back;

  Q->back = Q->front;
  Q->front = loPtr;

  return;
}

bool queue_all(queue* Q, check_property_fn* P)
//@requires is_queue(Q) && P != NULL; 
{
  if (Q->size == 0) return true;

  list* TMP = Q->front;

  for (int i = 0; i < Q->size; i++)
  {
    if (!(*P)(TMP->data)) return false;
    TMP = TMP->next;
  }
  return true;

}

void* queue_iterate(queue* Q, void* base, iterate_fn* F)
//@requires is_queue(Q) && F != NULL;
{
  if (Q->size == 0) return base;
  void* res = base;
  list* TMP = Q->front;

  for (int i = 0; i < Q->size; i++)
  {
    res = (*F)(res, TMP->data);
    TMP = TMP->next;
  }

  return res;

}



/* Other functions go here */


/* AND HERE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

// Client type
typedef queue* queue_t;

/************************** END IMPLEMENTATION **************************/
/************************************************************************/

/************************************************************************/
/*************************** Library Interface **************************/

// typedef ______* queue_t;

/* O(1) */
queue_t queue_new()
  /*@ensures \result != NULL; @*/ ;
  

/* O(1) */
int queue_size(queue_t Q)
  /*@requires Q != NULL; @*/
  /*@ensures \result >= 0; @*/ ;

/* O(1) -- adds an item to the back of the queue */
void enq(queue_t Q, void* x)
  /*@requires Q != NULL; @*/ ;

/* O(1) -- removes an item from the front of the queue */
void* deq(queue_t Q)
  /*@requires Q != NULL && queue_size(Q) > 0; @*/ ;

/* O(i) -- doesn't remove the item from the queue */
void* queue_peek(queue_t Q, int i)
  /*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ;

/* O(n) */
void queue_reverse(queue_t Q)
  /*@requires Q != NULL; @*/ ;

/* O(n) worst case, assuming P is O(1) */
bool queue_all(queue_t Q, check_property_fn* P)
  /*@requires Q != NULL && P != NULL; @*/ ;

/* O(n) worst case, assuming F is O(1) */
void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
  /*@requires Q != NULL && F != NULL; @*/ ;
